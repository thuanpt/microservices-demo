package main

import (
    "database/sql"
    "fmt"
    "io/ioutil"
    "log"
    "os"
    "path/filepath"
    "sort"
    "strings"

    "github.com/joho/godotenv"
    _ "github.com/go-sql-driver/mysql"
)

func main() {
    // Load .env t·ª´ th∆∞ m·ª•c cha
    err := godotenv.Load("../.env")
    if err != nil {
        log.Fatalf("L·ªói khi ƒë·ªçc file .env: %v", err)
    }

    // K·∫øt n·ªëi MySQL (kh√¥ng ch·ªâ ƒë·ªãnh database c·ª• th·ªÉ ƒë·ªÉ t·∫°o DB)
    dsn := fmt.Sprintf("%s:%s@tcp(%s:%s)/?charset=utf8mb4&parseTime=True&loc=Local",
        os.Getenv("DB_USER"),
        os.Getenv("DB_PASS"),
        os.Getenv("DB_HOST"),
        os.Getenv("DB_PORT"),
    )

    db, err := sql.Open("mysql", dsn)
    if err != nil {
        log.Fatalf("L·ªói khi k·∫øt n·ªëi DB: %v", err)
    }
    defer db.Close()

    // Ki·ªÉm tra tham s·ªë command line
    if len(os.Args) < 2 {
        log.Fatal("Usage: go run migrate.go [up|down]")
    }

    command := os.Args[1]
    
    switch command {
    case "up":
        migrateUp(db)
    case "down":
        migrateDown(db)
    default:
        log.Fatal("Command ph·∫£i l√† 'up' ho·∫∑c 'down'")
    }
}

// Ch·∫°y migration up
func migrateUp(db *sql.DB) {
    files, err := filepath.Glob("../migrations/*.up.sql")
    if err != nil {
        log.Fatalf("L·ªói khi ƒë·ªçc file migration: %v", err)
    }
    
    sort.Strings(files) // Sort ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± migration
    
    for _, file := range files {
        fmt.Printf("Ch·∫°y migration: %s\n", file)
        content, err := ioutil.ReadFile(file)
        if err != nil {
            log.Fatalf("L·ªói khi ƒë·ªçc file %s: %v", file, err)
        }
        
        // Split c√°c c√¢u SQL (c√≥ th·ªÉ c√≥ nhi·ªÅu c√¢u trong 1 file)
        statements := strings.Split(string(content), ";")
        for _, stmt := range statements {
            stmt = strings.TrimSpace(stmt)
            if stmt == "" {
                continue
            }
            
            _, err := db.Exec(stmt)
            if err != nil {
                log.Printf("L·ªói khi th·ª±c hi·ªán SQL: %s\nError: %v", stmt, err)
                // Kh√¥ng fatal ƒë·ªÉ ti·∫øp t·ª•c ch·∫°y c√°c statement kh√°c
            }
        }
        fmt.Printf("‚úÖ Migration %s ho√†n th√†nh\n", filepath.Base(file))
    }
    
    fmt.Println("üéâ T·∫•t c·∫£ migration UP ƒë√£ ho√†n th√†nh!")
}

// Ch·∫°y migration down (rollback)
func migrateDown(db *sql.DB) {
    files, err := filepath.Glob("../migrations/*.down.sql")
    if err != nil {
        log.Fatalf("L·ªói khi ƒë·ªçc file migration: %v", err)
    }
    
    // Sort ng∆∞·ª£c ƒë·ªÉ rollback theo th·ª© t·ª± ng∆∞·ª£c l·∫°i
    sort.Sort(sort.Reverse(sort.StringSlice(files)))
    
    for _, file := range files {
        fmt.Printf("Rollback migration: %s\n", file)
        content, err := ioutil.ReadFile(file)
        if err != nil {
            log.Fatalf("L·ªói khi ƒë·ªçc file %s: %v", file, err)
        }
        
        statements := strings.Split(string(content), ";")
        for _, stmt := range statements {
            stmt = strings.TrimSpace(stmt)
            if stmt == "" {
                continue
            }
            
            _, err := db.Exec(stmt)
            if err != nil {
                log.Printf("L·ªói khi th·ª±c hi·ªán SQL: %s\nError: %v", stmt, err)
            }
        }
        fmt.Printf("‚úÖ Rollback %s ho√†n th√†nh\n", filepath.Base(file))
    }
    
    fmt.Println("üéâ T·∫•t c·∫£ migration DOWN ƒë√£ ho√†n th√†nh!")
}